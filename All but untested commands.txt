#---------------------------------------------------------------------------------------------------
# 10. Reducing sequencing and PCR errors
#---------------------------------------------------------------------------------------------------
set.dir(output=./outFiles)
make.contigs(file=BSC16s.file,processors=8)
summary.seqs(fasta=./outFiles/BSC16s.trim.contigs.fasta,processors=8)
screen.seqs(fasta=./outFiles/BSC16s.trim.contigs.fasta, group=./outFiles/BSC16s.contigs.groups, maxambig=0, maxlength=300,processors=8)
#eða
#screen.seqs(fasta=./outFiles/BSC.trim.contigs.fasta, group=./outFiles/BSC.contigs.groups, summary=./outFiles/BSC.trim.contigs.summary, maxambig=0, maxlength=300,processors=8)

#---------------------------------------------------------------------------------------------------
# 20. Processing improved sequences
#---------------------------------------------------------------------------------------------------
unique.seqs(fasta=./outFiles/BSC16s.trim.contigs.good.fasta)
count.seqs(name=./outFiles/BSC16s.trim.contigs.good.names, group=./outFiles/BSC16s.contigs.good.groups,processors=8)
summary.seqs(count=./outFiles/BSC16s.trim.contigs.good.count_table,processors=8)
align.seqs(fasta=./outFiles/BSC16s.trim.contigs.good.unique.fasta, reference=silva.v5.fasta,processors=8)

#---------------------------------------------------------------------------------------------------
# Búið að testa hingað
#---------------------------------------------------------------------------------------------------

summary.seqs(fasta=./outFiles/BSC16s.trim.contigs.good.unique.align, count=./outFiles/BSC16s.trim.contigs.good.count_table,processors=8)
screen.seqs(fasta=./outFiles/BSC16s.trim.contigs.good.unique.align, count=./outFiles/BSC16s.trim.contigs.good.count_table, summary=./outFiles/BSC16s.trim.contigs.good.unique.summary, start=1968, end=11550, maxhomop=8,processors=8)

summary.seqs(fasta=current, count=current,processors=8)

filter.seqs(fasta=./outFiles/BSC16s.trim.contigs.good.unique.good.align, vertical=T, trump=.,processors=8)
unique.seqs(fasta=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.fasta, count=./outFiles/BSC16s.trim.contigs.good.good.count_table)
pre.cluster(fasta=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.fasta, count=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.count_table, diffs=2,processors=8)
chimera.uchime(fasta=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.fasta, count=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.count_table, dereplicate=t,processors=8)
remove.seqs(fasta=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.fasta, accnos=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.accnos,processors=8)
summary.seqs(fasta=current, count=current,processors=8)
classify.seqs(fasta=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.count_table, reference=trainset9_032012.pds.fasta, taxonomy=trainset9_032012.pds.tax, cutoff=80,processors=8)
remove.lineage(fasta=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.count_table, taxonomy=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.taxonomy, taxon=Chloroplast-Mitochondria-unknown-Archaea-Eukaryota,processors=8)

#---------------------------------------------------------------------------------------------------
# 30. Assessing error rates
#---------------------------------------------------------------------------------------------------
get.groups(count=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.count_table, fasta=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta, groups=Mock,processors=8)
seq.error(fasta=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.fasta, count=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.pick.count_table, reference=HMP_MOCK.v35.fasta, aligned=F,processors=8)
dist.seqs(fasta=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.fasta, cutoff=0.20,processors=8)
cluster(column=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.dist, count=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.pick.count_table,processors=8)
make.shared(list=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.an.unique_list.list, count=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.pick.count_table, label=0.03,processors=8)
rarefaction.single(shared=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.an.unique_list.shared,processors=8)

#---------------------------------------------------------------------------------------------------
# 40. Preparing for analysis
#---------------------------------------------------------------------------------------------------
remove.groups(count=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.count_table, fasta=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta, taxonomy=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.taxonomy, groups=Mock,processors=8)

#---------------------------------------------------------------------------------------------------
# 50. OTUs
#---------------------------------------------------------------------------------------------------
dist.seqs(fasta=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.fasta, cutoff=0.20,processors=8)
cluster(column=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.dist, count=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.pick.count_table,processors=8)
eða (í staðin fyrir þessar 2 skipanir hér að ofan, fer eftir stærð á dataset,processors=8)
cluster.split(fasta=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.fasta, count=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.pick.count_table, taxonomy=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.pick.taxonomy, splitmethod=classify, taxlevel=4, cutoff=0.15,processors=8)

make.shared(list=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.an.unique_list.list, count=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.pick.count_table, label=0.03,processors=8)
classify.otu(list=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.an.unique_list.list, count=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.pick.count_table, taxonomy=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.pick.taxonomy, label=0.03,processors=8)

#---------------------------------------------------------------------------------------------------
# 50.10 Phylotypes
#---------------------------------------------------------------------------------------------------
phylotype(taxonomy=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.pick.taxonomy,processors=8)
make.shared(list=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.pick.tx.list, count=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.pick.count_table, label=1,processors=8)
classify.otu(list=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.pick.tx.list, count=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.pick.count_table, taxonomy=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pds.wang.pick.pick.taxonomy, label=1,processors=8)

#---------------------------------------------------------------------------------------------------
# 50.20 Phylogenetic
#---------------------------------------------------------------------------------------------------
dist.seqs(fasta=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.fasta, output=lt, processors=8,processors=8)
clearcut(phylip=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.phylip.dist,processors=8)

#---------------------------------------------------------------------------------------------------
# 60. Analysis
#---------------------------------------------------------------------------------------------------
system(mv ./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.an.unique_list.shared ./outFiles/BSC16s.an.shared)
system(mv ./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.an.unique_list.0.03.cons.taxonomy ./outFiles/BSC16s.an.cons.taxonomy)

count.groups(shared=./outFiles/BSC16s.an.shared)
sub.sample(shared=./outFiles/BSC16s.an.shared, size=2241)

#---------------------------------------------------------------------------------------------------
# 70. OTU-based analysis
#---------------------------------------------------------------------------------------------------

#---------------------------------------------------------------------------------------------------
# 70.10 Alpha diversity
#---------------------------------------------------------------------------------------------------
rarefaction.single(shared=./outFiles/BSC16s.an.shared, calc=sobs, freq=100,processors=8)
summary.single(shared=./outFiles/BSC16s.an.shared, calc=nseqs-coverage-sobs-invsimpson, subsample=2441,processors=8)

#---------------------------------------------------------------------------------------------------
# 70.20 Beta diversity measurements
#---------------------------------------------------------------------------------------------------
heatmap.bin(shared=./outFiles/BSC16s.an.0.03.subsample.shared, scale=log2, numotu=50,processors=8)
dist.shared(shared=./outFiles/BSC16s.an.shared, calc=thetayc-jclass, subsample=2241,processors=8)
heatmap.sim(phylip=./outFiles/BSC16s.an.thetayc.0.03.lt.ave.dist,processors=8)
heatmap.sim(phylip=./outFiles/BSC16s.an.jclass.0.03.lt.ave.dist,processors=8)
venn(shared=./outFiles/BSC16s.an.0.03.subsample.shared, groups=F3D0-F3D1-F3D2-F3D3,processors=8)
tree.shared(phylip=./outFiles/BSC16s.an.thetayc.0.03.lt.ave.dist,processors=8)
parsimony(tree=./outFiles/BSC16s.an.thetayc.0.03.lt.ave.tre, group=mouse.time.design,  groups=all,processors=8)
pcoa(phylip=./outFiles/BSC16s.an.thetayc.0.03.lt.ave.dist,processors=8)
nmds(phylip=./outFiles/BSC16s.an.thetayc.0.03.lt.ave.dist,processors=8)
nmds(phylip=./outFiles/BSC16s.an.thetayc.0.03.lt.ave.dist, mindim=3, maxdim=3,processors=8)
amova(phylip=./outFiles/BSC16s.an.thetayc.0.03.lt.ave.dist, design=mouse.time.design,processors=8)
homova(phylip=./outFiles/BSC16s.an.thetayc.0.03.lt.ave.dist, design=mouse.time.design,processors=8)
corr.axes(axes=./outFiles/BSC16s.an.thetayc.0.03.lt.ave.nmds.axes, shared=./outFiles/BSC16s.an.0.03.subsample.shared, method=spearman, numaxes=3,processors=8)
corr.axes(axes=./outFiles/BSC16s.an.thetayc.0.03.lt.ave.nmds.axes, metadata=mouse.dpw.metadata, method=spearman, numaxes=3,processors=8)
get.communitytype(shared=./outFiles/BSC16s.an.0.03.subsample.shared,processors=8)

#---------------------------------------------------------------------------------------------------
# 70.30 Population-level analysis
#---------------------------------------------------------------------------------------------------
metastats(shared=./outFiles/BSC16s.an.0.03.subsample.shared, design=mouse.time.design,processors=8)
classify.rf(shared=./outFiles/BSC16s.an.0.03.subsample.shared, design=mouse.time.design,processors=8)

#---------------------------------------------------------------------------------------------------
# 80. Phylogeny-based analysis
#---------------------------------------------------------------------------------------------------

#---------------------------------------------------------------------------------------------------
# 80.10 Alpha diversity
#---------------------------------------------------------------------------------------------------
phylo.diversity(tree=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.phylip.tre, count=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.pick.count_table, rarefy=T,processors=8)

#---------------------------------------------------------------------------------------------------
# 80.20 Beta diversity
#---------------------------------------------------------------------------------------------------
unifrac.unweighted(tree=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.phylip.tre, count=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.pick.count_table, distance=lt, processors=2, random=F, subsample=2241,processors=8)
unifrac.weighted(tree=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.pick.phylip.tre, count=./outFiles/BSC16s.trim.contigs.good.unique.good.filter.unique.precluster.denovo.uchime.pick.pick.pick.count_table, distance=lt, processors=2, random=F, subsample=2241,processors=8)

